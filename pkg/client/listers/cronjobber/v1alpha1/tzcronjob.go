/*
Copyright 2019 The Cronjobber Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/hiddeco/cronjobber/pkg/apis/cronjobber/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TZCronJobLister helps list TZCronJobs.
type TZCronJobLister interface {
	// List lists all TZCronJobs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TZCronJob, err error)
	// TZCronJobs returns an object that can list and get TZCronJobs.
	TZCronJobs(namespace string) TZCronJobNamespaceLister
	TZCronJobListerExpansion
}

// tZCronJobLister implements the TZCronJobLister interface.
type tZCronJobLister struct {
	indexer cache.Indexer
}

// NewTZCronJobLister returns a new TZCronJobLister.
func NewTZCronJobLister(indexer cache.Indexer) TZCronJobLister {
	return &tZCronJobLister{indexer: indexer}
}

// List lists all TZCronJobs in the indexer.
func (s *tZCronJobLister) List(selector labels.Selector) (ret []*v1alpha1.TZCronJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TZCronJob))
	})
	return ret, err
}

// TZCronJobs returns an object that can list and get TZCronJobs.
func (s *tZCronJobLister) TZCronJobs(namespace string) TZCronJobNamespaceLister {
	return tZCronJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TZCronJobNamespaceLister helps list and get TZCronJobs.
type TZCronJobNamespaceLister interface {
	// List lists all TZCronJobs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TZCronJob, err error)
	// Get retrieves the TZCronJob from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TZCronJob, error)
	TZCronJobNamespaceListerExpansion
}

// tZCronJobNamespaceLister implements the TZCronJobNamespaceLister
// interface.
type tZCronJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TZCronJobs in the indexer for a given namespace.
func (s tZCronJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TZCronJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TZCronJob))
	})
	return ret, err
}

// Get retrieves the TZCronJob from the indexer for a given namespace and name.
func (s tZCronJobNamespaceLister) Get(name string) (*v1alpha1.TZCronJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tzcronjob"), name)
	}
	return obj.(*v1alpha1.TZCronJob), nil
}
